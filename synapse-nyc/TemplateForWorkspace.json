{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-nyc"
		},
		"ls_serveless_sql_pool_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_serveless_sql_pool'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=synapse-nyc-ondemand.sql.azuresynapse.net;Initial Catalog=nyc_taxi_ldw"
		},
		"synapse-nyc-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-nyc-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-nyc.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"bing-covid-19-data_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'bing-covid-19-data'"
		},
		"ln_ADLS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapseadlk.dfs.core.windows.net/"
		},
		"synapse-nyc-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapseadlk.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/nyctaxispark')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_gold_campain')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get year month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serveless_sql_pool",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "SELECT distinct t.year,t.month from silver.vw_trip_data_green t"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "create silver trip data partition",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get year month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get year month').output.resultSets[0].rows",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "usp_gold_green_data",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete partition",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[gold].[usp_gold_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serveless_sql_pool",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Delete partition",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "gold/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "create gold  view",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "create silver trip data partition",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serveless_sql_pool",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "DROP VIEW if EXISTS gold.vw_trip_data_green\n"
								},
								{
									"type": "Query",
									"text": "CREATE view gold.vw_trip_data_green\nas \nSELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month, \n    result.*\nFROM\n    OPENROWSET(\n    BULK  'gold/trip_data_green/year=*/month=*/*.parquet',\n    DATA_SOURCE = 'nyc_taxi_src',  \n    FORMAT = 'parquet'\n    ) \n    with \n    (\n       trip_date DATE,Borough VARCHAR(25),trip_day VARCHAR(25),trip_day_weekend_ind VARCHAR(1),\n       card_trip_count INT,cash_trip_count INT\n    )\n    AS [result]\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serveless_sql_pool')]",
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_tables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach folder path",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('v_folder_path_usp_name')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete silver folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "@item().folder_path",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "usp_silver_table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete silver folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().usp_name",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serveless_sql_pool",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"v_folder_path_usp_name": {
						"type": "Array",
						"defaultValue": [
							{
								"folder_path": "silver/taxi_zone",
								"usp_name": "silver.usp_silver_taxi_zone"
							},
							{
								"folder_path": "silver/calendar",
								"usp_name": "silver.usp_silver_calendar"
							},
							{
								"folder_path": "silver/trip_type",
								"usp_name": "silver.usp_silver_trip_type"
							},
							{
								"folder_path": "silver/vendor",
								"usp_name": "silver.usp_silver_vendor"
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_dynamic')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serveless_sql_pool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get year month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serveless_sql_pool",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "SELECT distinct t.year,t.month from bronze.vw_trip_data_green_csv t"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "create silver trip data partition",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get year month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get year month').output.resultSets[0].rows",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "usp_silver_green_data",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete partition",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[silver].[usp_silver_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serveless_sql_pool",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Delete partition",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "silver/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "create silver trip_data _green view",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "create silver trip data partition",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serveless_sql_pool",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "DROP VIEW if EXISTS silver.vw_trip_data_green\n"
								},
								{
									"type": "Query",
									"text": "CREATE view silver.vw_trip_data_green\nas \nSELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month, \n    result.*\nFROM\n    OPENROWSET(\n    BULK  'silver/trip_data_green/year=*/month=*/*.parquet',\n    DATA_SOURCE = 'nyc_taxi_src',  \n    FORMAT = 'parquet'\n    ) \n    with \n    (\n        VendorID INT,lpep_pickup_datetime DATETIME2(7),lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag CHAR(1),RatecodeID INT,PULocationID SMALLINT,DOLocationID SMALLINT,\n    passenger_count INT,trip_distance FLOAT,fare_amount FLOAT,extra FLOAT ,mta_tax Float,\n    tip_amount Float,tolls_amount Float,ehail_fee Float,improvement_surcharge Float,total_amount Float,\n    payment_type SMALLINT,trip_type SMALLINT,congestion_surcharge Float\n    )\n    AS [result]\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serveless_sql_pool')]",
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_master_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute pl_silver_table",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_silver_tables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute pl_silver_green_data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_silver_trip_data_green",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute pl_gold",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute pl_silver_table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute pl_silver_green_data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_gold_campain",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_create_silver_tables')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_create_silver_trip_data_green')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_create_gold_campain')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_nyc_taxi_dynamic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ln_ADLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_folder_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().p_folder_path",
							"type": "Expression"
						},
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ln_ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bing-covid-19-data')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('bing-covid-19-data_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ln_ADLS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ln_ADLS_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_serveless_sql_pool')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ls_serveless_sql_pool_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-nyc-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-nyc-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-nyc-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapse-nyc-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tr_start')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_master_pipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-09-04T13:57:00",
						"timeZone": "W. Europe Standard Time",
						"schedule": {
							"minutes": [
								20
							],
							"hours": [
								16
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_master_pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_join_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": " USE nyc_taxi_discovery\n\n SELECT\n    top 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    )  AS [result]\n---------------------------------------------------------------------------------------------------\nwith v_trip_data as (\nselect * from \n OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=*/*.parquet',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    )  AS trip_data\n\n),\nv_taxi_zone as (\nselect * from OPENROWSET(\n        BULK 'raw/taxi_zone.csv',\n        DATA_SOURCE='nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    WITH (LocationID SMALLINT,Borough VARCHAR(255),Zone VARCHAR(255),service_zone VARCHAR(255)) as taxi_zone\n\n),\nv_payment_type as (\nselect * from\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR ='0x0b', \n        FIELDQUOTE = '0x0b'\n    ) \n    with (jsondoc NVARCHAR(MAX)) AS [result] \n    CROSS APPLY OPENJSON(jsondoc)\n    with (payment_type TINYINT,derscription VARCHAR(25) '$.payment_type_desc') as payment_type_tab\n)\n\nselect v_taxi_zone.Borough,\n        count(1) as total_trips,\n        sum(case when v_payment_type.derscription='Cash' then 1 else 0 end) as Cash_trip,\n        sum(case when v_payment_type.derscription='Credit card' then 1 else 0 end) as Credit_trip\nfrom v_trip_data join v_taxi_zone \n    on v_trip_data.PULocationID=v_taxi_zone.LocationID\njoin v_payment_type\n   on v_payment_type.payment_type=v_trip_data.payment_type\n    where v_payment_type.payment_type in (1,2)\n    group by v_taxi_zone.Borough\n\n\n\n    ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_create_database')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE Master\nGO\n\nCREATE DATABASE nyc_taxi_ldw\nGO\n\nalter DATABASE nyc_taxi_ldw collate Latin1_General_100_BIN2_UTF8\nGO\n\nUSE nyc_taxi_ldw\nGO\n\nCREATE SCHEMA bronze\nGO\n\nCREATE SCHEMA silver\nGO\n\nCREATE SCHEMA gold\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_explore_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapseadlk.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) AS [result]\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapseadlk.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    WITH (LocationID SMALLINT,Borough VARCHAR(255),Zone VARCHAR(255),service_zone VARCHAR(255)) \n    \n    AS [result]\n\nEXEC sp_describe_first_result_set N'\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''abfss://nyc-taxi-data@synapseadlk.dfs.core.windows.net/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW=TRUE\n    ) AS [result]\n'\n\ncreate DATABASE nyc_taxi_discovery\n\nalter DATABASE nyc_taxi_discovery COLLATE Latin1_General_100_CI_AI_SC_UTF8\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapseadlk.dfs.core.windows.net/raw/taxi_zone_without_header.csv',\n        FORMAT = 'CSV',\n        FIRSTROW=1,\n        PARSER_VERSION = '2.0',\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    WITH (LocationID SMALLINT 1,Borough VARCHAR(255) 2,Zone VARCHAR(255) 3,service_zone VARCHAR(255) 4) \n    \n    AS [result]\n\n\nCREATE EXTERNAL DATA SOURCE nyc_taxi_data\nWITH (\n    LOCATION = 'abfss://nyc-taxi-data@synapseadlk.dfs.core.windows.net'\n)\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'raw/taxi_zone.csv',\n        DATA_SOURCE='nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    WITH (LocationID SMALLINT,Borough VARCHAR(255),Zone VARCHAR(255),service_zone VARCHAR(255)) \n    \n    AS [result]\n\nCREATE EXTERNAL DATA SOURCE nyc_taxi_data_raw\nWITH (\n    LOCATION = 'abfss://nyc-taxi-data@synapseadlk.dfs.core.windows.net/raw'\n)   \n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    WITH (LocationID SMALLINT,Borough VARCHAR(255),Zone VARCHAR(255),service_zone VARCHAR(255)) \n    \n    AS [result]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_usp_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/stored procedure"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE or ALTER procedure silver.usp_silver_trip_data_green\n@year VARCHAR(4),@month varchar(2)\nAS\nBEGIN\nDECLARE @create_sql NVARCHAR(MAX),\n@drop_sql NVARCHAR(MAX);\n\nset @create_sql='CREATE EXTERNAL TABLE silver.trip_data_green_'+@year+'_'+@month+\n ' WITH (\n    LOCATION = ''silver/trip_data_green/year='+@year+'/month='+@month+''',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = parquet_file_format\n \n)\nas \nselect * from bronze.vw_trip_data_green_csv where year='''+@year+''' and month='''+@month+'''';\n\nEXEC sp_executesql @create_sql;\n\nprint(@create_sql)\n\nset @drop_sql='drop EXTERNAL TABLE silver.trip_data_green_'+@year+'_'+@month;\n\nEXEC sp_executesql @drop_sql;\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_create_external_data_sources')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE EXTERNAL DATA SOURCE nyc_taxi_src\nWITH (\n    LOCATION = 'https://synapseadlk.dfs.core.windows.net/nyc-taxi-data'\n);\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_explore_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapseadlk.dfs.core.windows.net/nyc-taxi-data/raw/calendar.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) AS [result]\n\nEXEC sp_describe_first_result_set N'\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''abfss://nyc-taxi-data@synapseadlk.dfs.core.windows.net/raw/calendar.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW=TRUE\n    ) AS [result]\n'    \n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapseadlk.dfs.core.windows.net/raw/calendar.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    WITH (date_key INT,date DATE,year SMALLINT,month SMALLINT,day SMALLINT,\n        day_name varchar(20),day_of_year SMALLINT,week_of_month SMALLINT,\n        week_of_year SMALLINT,month_name VARCHAR(15),year_month INT,year_week INT) \n    \n    AS [result]\n\n\n\n\n\n\n\n\n \n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'calendar.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    WITH (date_key INT,date DATE,year SMALLINT,month SMALLINT,day SMALLINT,\n        day_name varchar(20),day_of_year SMALLINT,week_of_month SMALLINT,\n        week_of_year SMALLINT,month_name VARCHAR(15),year_month INT,year_week INT) \n    \n    AS [result]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_usp_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/stored procedure"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n--select * from bronze.vw_trip_data_green_csv where year='''+@year+''' and month='''+@month+'''';\nCREATE or ALTER procedure gold.usp_gold_trip_data_green\n@year VARCHAR(4),@month varchar(2)\nAS\nBEGIN\nDECLARE @create_sql NVARCHAR(MAX),\n@drop_sql NVARCHAR(MAX);\n\nset @create_sql='CREATE EXTERNAL TABLE gold.trip_data_green_'+@year+'_'+@month+\n ' WITH (\n    LOCATION = ''gold/trip_data_green/year='+@year+'/month='+@month+''',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = parquet_file_format\n \n)\nas \nselect td.year,td.month,convert(DATE,td.lpep_pickup_datetime) as trip_date,tz.Borough,cal.day_name as trip_day,\ncase when cal.day_name in (''Saturday'',''Sunday'') then ''Y'' else ''N'' end as trip_day_weekend_ind ,\nsum(case when pt.derscription=''Credit card'' then 1 else 0 end) as card_trip_count,\nsum(case when pt.derscription=''Cash'' then 1 else 0 end) as cash_trip_count\nfrom silver.vw_trip_data_green td \njoin silver.taxi_zone tz on tz.LocationID=td.PULocationID\njoin silver.calendar cal on cal.date=convert(DATE,td.lpep_pickup_datetime)\njoin silver.payment_type pt on pt.payment_type=td.payment_type\nWHERE td.year='''+@year+''' AND td.month=''' + @month +'''\ngroup by td.year,td.month,convert(DATE,td.lpep_pickup_datetime),tz.Borough,cal.day_name ,\ncase when cal.day_name in (''Saturday'',''Sunday'') then ''Y'' else ''N'' end'\n\nEXEC sp_executesql @create_sql;\n\nprint(@create_sql)\n\nset @drop_sql='drop EXTERNAL TABLE gold.trip_data_green_'+@year+'_'+@month;\n\nEXEC sp_executesql @drop_sql;\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_create_file_format')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nIF NOT EXISTS (select * from sys.external_file_formats where name ='csv_file_format')\nCREATE EXTERNAL FILE FORMAT csv_file_format\nWITH (\n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS(\n            FIELD_TERMINATOR = ',',\n            STRING_DELIMITER = '\"',\n            FIRST_ROW=2,\n            USE_TYPE_DEFAULT=FALSE,\n            ENCODING='UTF8',\n            PARSER_VERSION='2.0'\n        )\n    );\nGO\n\nIF NOT EXISTS (select * from sys.external_file_formats where name ='csv_file_format_pv1')\nCREATE EXTERNAL FILE FORMAT csv_file_format_pv1\nWITH (\n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS(\n            FIELD_TERMINATOR = ',',\n            STRING_DELIMITER = '\"',\n            FIRST_ROW=2,\n            USE_TYPE_DEFAULT=FALSE,\n            ENCODING='UTF8',\n            PARSER_VERSION='1.0'\n        )\n    );\nGO\n\nIF NOT EXISTS (select * from sys.external_file_formats where name ='tsv_file_format')\nCREATE EXTERNAL FILE FORMAT tsv_file_format\nWITH (\n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS(\n            FIELD_TERMINATOR = '\\t',\n            STRING_DELIMITER = '\"',\n            FIRST_ROW=2,\n            USE_TYPE_DEFAULT=FALSE,\n            ENCODING='UTF8',\n            PARSER_VERSION='2.0'\n        )\n    );\nGO\n\nIF NOT EXISTS (select * from sys.external_file_formats where name ='parquet_file_format')\nCREATE EXTERNAL FILE FORMAT parquet_file_format\nWITH\n(  \n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n)\n \nGO\n\nIF NOT EXISTS (select * from sys.external_file_formats where name ='delta_file_format')\nCREATE EXTERNAL FILE FORMAT delta_file_format\nWITH\n(  \n    FORMAT_TYPE = delta,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n    \n)\n \nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_explore_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapseadlk.dfs.core.windows.net/nyc-taxi-data/raw/trip_type.tsv',\n        FORMAT = 'csv',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR='\\t'\n    ) AS [result]\n\nEXEC sp_describe_first_result_set N'\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''https://synapseadlk.dfs.core.windows.net/nyc-taxi-data/raw/trip_type.tsv'',\n        FORMAT = ''csv'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=''\\t''\n    ) AS [result]\n'    \n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapseadlk.dfs.core.windows.net/nyc-taxi-data/raw/trip_type.tsv',\n        FORMAT = 'csv',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR='\\t'\n    ) \n    WITH (trip_type INT,trip_type_desc VARCHAR(15)) \n    \n    AS [result]\n\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_type.tsv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'csv',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR='\\t'\n    ) \n    WITH (trip_type INT,trip_type_desc VARCHAR(15)) \n    \n    AS [result]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_usp_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/stored procedure"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE or ALTER procedure silver.usp_silver_taxi_zone\nAS\nBEGIN\n--silver.taxi_zone\nIF object_id('silver.taxi_zone') is not NULL\n    drop EXTERNAL TABLE silver.taxi_zone\n\nCREATE EXTERNAL TABLE silver.taxi_zone\nWITH (\n    LOCATION = 'silver/taxi_zone',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = parquet_file_format\n \n)\nas \nselect * from bronze.taxi_zone\n\nEND\nGO\n\nCREATE or ALTER procedure silver.usp_silver_calendar\nAS\nBEGIN\n--silver.taxi_zone\nIF object_id('silver.calendar') is not NULL\n    drop EXTERNAL TABLE silver.calendar\n\nCREATE EXTERNAL TABLE silver.calendar\nWITH (\n    LOCATION = 'silver/calendar',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = parquet_file_format\n \n)\nas \nselect * from bronze.calendar\n\nEND\nGO\n\nCREATE or ALTER procedure silver.usp_silver_trip_type\nAS\nBEGIN\n--silver.taxi_zone\nIF object_id('silver.trip_type') is not NULL\n    drop EXTERNAL TABLE silver.trip_type\n\nCREATE EXTERNAL TABLE silver.trip_type\nWITH (\n    LOCATION = 'silver/trip_type',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = parquet_file_format\n \n)\nas \nselect * from bronze.trip_type\n\nEND\nGO\n\nCREATE or ALTER procedure silver.usp_silver_vendor\nAS\nBEGIN\n--silver.taxi_zone\nIF object_id('silver.vendor') is not NULL\n    drop EXTERNAL TABLE silver.vendor\n\nCREATE EXTERNAL TABLE silver.vendor\nWITH (\n    LOCATION = 'silver/vendor',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = parquet_file_format\n \n)\nas \nselect * from bronze.vendor\n\nEND\nGO\n\nCREATE or ALTER procedure silver.usp_silver_rate_code\nAS\nBEGIN\n--silver.taxi_zone\nIF object_id('silver.rate_code') is not NULL\n    drop EXTERNAL TABLE silver.rate_code\n\nCREATE EXTERNAL TABLE silver.rate_code\nWITH (\n    LOCATION = 'silver/rate_code',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = parquet_file_format\n \n)\nas \nselect * from bronze.rate_code\n\nEND\nGO\n\nCREATE or ALTER procedure silver.usp_silver_payment_type\nAS\nBEGIN\n--silver.taxi_zone\nIF object_id('silver.payment_type') is not NULL\n    drop EXTERNAL TABLE silver.payment_type\n\nCREATE EXTERNAL TABLE silver.payment_type\nWITH (\n    LOCATION = 'silver/payment_type',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = parquet_file_format\n \n)\nas \nselect * from bronze.payment_type\n\nEND",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_create_bronze_table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n-- create taxi_zone\nIF object_id('bronze.taxi_zone') is not NULL\n    drop EXTERNAL TABLE bronze.taxi_zone\n\nCREATE EXTERNAL TABLE bronze.taxi_zone\n(\n    LocationID SMALLINT,Borough VARCHAR(15),Zone VARCHAR(50),service_zone VARCHAR(15)\n)\nWITH (\n    LOCATION = 'raw/taxi_zone.csv',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = csv_file_format,\n    REJECT_VALUE=10,\n    REJECTED_ROW_LOCATION='rejection/taxi_zone'\n)\nGO\n\n-- create calendar\nIF object_id('bronze.calendar') is not NULL\n    drop EXTERNAL TABLE bronze.taxi_zone\n\nCREATE EXTERNAL TABLE bronze.calendar\n(\n    date_key INT,date DATE,year SMALLINT,month SMALLINT,day SMALLINT,\n        day_name varchar(20),day_of_year SMALLINT,week_of_month SMALLINT,\n        week_of_year SMALLINT,month_name VARCHAR(15),year_month INT,year_week INT\n)\nWITH (\n    LOCATION = 'raw/calendar.csv',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = csv_file_format\n)\nGO\n\n--create vendor\nIF object_id('bronze.vendor') is not NULL\n    drop EXTERNAL TABLE bronze.vendor\n\nCREATE EXTERNAL TABLE bronze.vendor\n(\n    vendor_id SMALLINT,vendor_name VARCHAR(50)\n)\nWITH (\n    LOCATION = 'raw/vendor.csv',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = csv_file_format_pv1\n)\nGO\n--create trip_type\nIF object_id('bronze.trip_type') is not NULL\n    drop EXTERNAL TABLE bronze.trip_type\n\nCREATE EXTERNAL TABLE bronze.trip_type\n(\n    trip_type INT,trip_type_desc VARCHAR(15)\n)\nWITH (\n    LOCATION = 'raw/trip_type.tsv',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = tsv_file_format\n)\nGO\n--create trip_data_green_csv\nIF object_id('bronze.trip_data_green_csv') is not NULL\n    drop EXTERNAL TABLE bronze.trip_data_green_csv\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_csv\n(\n    VendorID INT,lpep_pickup_datetime DATETIME2(7),lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag CHAR(1),RatecodeID INT,PULocationID SMALLINT,DOLocationID SMALLINT,\n    passenger_count INT,trip_distance FLOAT,fare_amount FLOAT,extra FLOAT ,mta_tax Float,\n    tip_amount Float,tolls_amount Float,ehail_fee Float,improvement_surcharge Float,total_amount Float,\n    payment_type SMALLINT,trip_type SMALLINT,congestion_surcharge Float\n)\nWITH (\n    LOCATION = 'raw/trip_data_green_csv/year=*/month=*/*.csv',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = csv_file_format\n)\nGO\n\n--create trip_data_green_parquet\nIF object_id('bronze.trip_data_green_parquet') is not NULL\n    drop EXTERNAL TABLE bronze.trip_data_green_parquet\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_parquet\n(\n    VendorID INT,lpep_pickup_datetime DATETIME2(7),lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag CHAR(1),RatecodeID INT,PULocationID SMALLINT,DOLocationID SMALLINT,\n    passenger_count INT,trip_distance FLOAT,fare_amount FLOAT,extra FLOAT ,mta_tax Float,\n    tip_amount Float,tolls_amount Float,ehail_fee INT,improvement_surcharge Float,total_amount Float,\n    payment_type SMALLINT,trip_type SMALLINT,congestion_surcharge Float\n)\nWITH (\n    LOCATION = 'raw/trip_data_green_parquet/year=*/month=*/*.parquet',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = parquet_file_format\n)\nGO\n\nselect top 10 * from bronze.trip_data_green_parquet\n\n--create trip_data_green_delta\nIF object_id('bronze.trip_data_green_delta') is not NULL\n    drop EXTERNAL TABLE bronze.trip_data_green_delta\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_delta\n(\n    VendorID INT,lpep_pickup_datetime DATETIME2(7),lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag CHAR(1),RatecodeID INT,PULocationID SMALLINT,DOLocationID SMALLINT,\n    passenger_count INT,trip_distance FLOAT,fare_amount FLOAT,extra FLOAT ,mta_tax Float,\n    tip_amount Float,tolls_amount Float,ehail_fee INT,improvement_surcharge Float,total_amount Float,\n    payment_type SMALLINT,trip_type SMALLINT,congestion_surcharge Float\n)\nWITH (\n    LOCATION = 'raw/trip_data_green_delta/',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = delta_file_format\n)\nGO\n\nselect top 10 * from bronze.trip_data_green_delta\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_explore_payment_type_json_lineFormat')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "----------------------------------------------------------------------------------------\n--- Reading Data from JSON file with line formate\n\n---{\"payment_type\":1,\"payment_type_desc\":\"Credit card\"}\n---{\"payment_type\":2,\"payment_type_desc\":\"Cash\"}\n---{\"payment_type\":3,\"payment_type_desc\":\"No charge\"}\n----------------------------------------------------------------------------------------\nselect payment_type,derscription\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR ='0x0b', \n        FIELDQUOTE = '0x0b'\n    ) \n    with (jsondoc NVARCHAR(MAX)) AS [result] \n    CROSS APPLY OPENJSON(jsondoc)\n    with (payment_type TINYINT,derscription VARCHAR(25) '$.payment_type_desc');\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_create_bronze_view')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nDROP VIEW if EXISTS bronze.vw_rate_code\nGO\n\nCREATE view bronze.vw_rate_code \nas \nselect rate_code_id,rate_code\nFROM\n    OPENROWSET(\n        BULK '/raw/rate_code.json',\n        DATA_SOURCE='nyc_taxi_src',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR ='0x0b', \n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR='0x0b'\n    ) \n    with (jsondoc NVARCHAR(MAX)) AS [result] \n    CROSS APPLY OPENJSON(jsondoc)\n    with (rate_code_id TINYINT,rate_code VARCHAR(25) )\nGo   \n\n--------------------------------------------------------------------------------------------------------------\n\nDROP VIEW if EXISTS bronze.vw_payment_type\nGO\n\nCREATE view bronze.vw_payment_type \nas \nselect payment_type,derscription\nFROM\n    OPENROWSET(\n        BULK '/raw/payment_type.json',\n        DATA_SOURCE='nyc_taxi_src',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR ='0x0b', \n        FIELDQUOTE = '0x0b'\n    ) \n    with (jsondoc NVARCHAR(MAX)) AS [result] \n    CROSS APPLY OPENJSON(jsondoc)\n    with (payment_type TINYINT,derscription VARCHAR(25) '$.payment_type_desc')\nGo  \n\n--------------------------------------------------------------------------------------------------------------\nDROP VIEW if EXISTS bronze.vw_trip_data_green_csv\nGO\n\nCREATE view bronze.vw_trip_data_green_csv \nas \nSELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month, \n    result.*\nFROM\n    OPENROWSET(\n        BULK '/raw/trip_data_green_csv/year=*/month=*/*.csv' ,\n        DATA_SOURCE='nyc_taxi_src',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    with \n    (\n        VendorID INT,lpep_pickup_datetime DATETIME2(7),lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag CHAR(1),RatecodeID INT,PULocationID SMALLINT,DOLocationID SMALLINT,\n    passenger_count INT,trip_distance FLOAT,fare_amount FLOAT,extra FLOAT ,mta_tax Float,\n    tip_amount Float,tolls_amount Float,ehail_fee Float,improvement_surcharge Float,total_amount Float,\n    payment_type SMALLINT,trip_type SMALLINT,congestion_surcharge Float\n    )\n    AS [result]\nGO \n\nselect count(1)  from bronze.vw_trip_data_green_csv\nwhere year='2020' and month='02'\n   \n   \n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_explore_payment_type_json_Array')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "----------------------------------------------------------------------------------------\n--- Reading Data from JSON file with Array Formate\n\n---{\"payment_type\":4,\"payment_type_desc\":[{\"sub_type\":1, \"value\":\"Dispute\"}]}\n---{\"payment_type\":5,\"payment_type_desc\":[{\"sub_type\":1, \"value\":\"Unknown\"}, {\"sub_type\":2, \"value\":\"Unavailable\"}]}\n---{\"payment_type\":6,\"payment_type_desc\":[{\"sub_type\":1, \"value\":\"Voided trip\"}]}\n----------------------------------------------------------------------------------------    \n--Reading Data from JSON file with Array Formate using open json\n\nselect *\nFROM\n    OPENROWSET(\n        BULK 'payment_type_array.json',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR ='0x0b', \n        FIELDQUOTE = '0x0b'\n    ) \n    with (jsondoc NVARCHAR(MAX)) AS [result] \n    CROSS APPLY OPENJSON(jsondoc)\n    with (payment_type TINYINT,payment_type_desc NVARCHAR(MAX) as JSON )\n     CROSS APPLY OPENJSON(payment_type_desc)\n     WITH (Description VARCHAR(25) '$.value');\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_create_silver_table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n--silver.taxi_zone\nIF object_id('silver.taxi_zone') is not NULL\n    drop EXTERNAL TABLE silver.taxi_zone\n\nCREATE EXTERNAL TABLE silver.taxi_zone\nWITH (\n    LOCATION = 'silver/taxi_zone',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = parquet_file_format\n \n)\nas \nselect * from bronze.taxi_zone\n\n--silver.calendar\nIF object_id('silver.calendar') is not NULL\n    drop EXTERNAL TABLE silver.calendar\n\nCREATE EXTERNAL TABLE silver.calendar\n\nWITH (\n    LOCATION = 'silver/calendar',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = parquet_file_format\n \n)\nas \nselect * from bronze.calendar\n\n\n--silver.vendor\nIF object_id('silver.vendor') is not NULL\n    drop EXTERNAL TABLE silver.vendor\n\nCREATE EXTERNAL TABLE silver.vendor\n\nWITH (\n    LOCATION = 'silver/vendor',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = parquet_file_format\n \n)\nas \nselect * from bronze.vendor\n\n--silver.trip_type\nIF object_id('silver.trip_type') is not NULL\n    drop EXTERNAL TABLE silver.trip_type\n\nCREATE EXTERNAL TABLE silver.trip_type\n\nWITH (\n    LOCATION = 'silver/trip_type',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = parquet_file_format\n \n)\nas \nselect * from bronze.trip_type\n\n--silver.rate_code \nIF object_id('silver.rate_code') is not NULL\n    drop EXTERNAL TABLE silver.rate_code\n\nCREATE EXTERNAL TABLE silver.rate_code\n\nWITH (\n    LOCATION = 'silver/rate_code',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = parquet_file_format\n \n)\nas \nselect * from bronze.vw_rate_code \n\n--silver.payment_type  trip_data_green_csv\nIF object_id('silver.payment_type') is not NULL\n    drop EXTERNAL TABLE silver.payment_type\n\nCREATE EXTERNAL TABLE silver.payment_type\n\nWITH (\n    LOCATION = 'silver/payment_type',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = parquet_file_format\n \n)\nas \nselect * from bronze.vw_payment_type\n\n--trip data\nIF object_id('silver.trip_data_green') is not NULL\n    drop EXTERNAL TABLE silver.trip_data_green\n\nCREATE EXTERNAL TABLE silver.trip_data_green\n\nWITH (\n    LOCATION = 'silver/trip_data_green',\n    DATA_SOURCE = nyc_taxi_src,  \n    FILE_FORMAT = parquet_file_format\n \n)\nas \nselect * from bronze.trip_data_green_csv\n\n--trip data using stored procedure\nEXEC silver.usp_silver_trip_data_green '2020','01'\nEXEC silver.usp_silver_trip_data_green '2020','02'\nEXEC silver.usp_silver_trip_data_green '2020','03'\nEXEC silver.usp_silver_trip_data_green '2020','04'\nEXEC silver.usp_silver_trip_data_green '2020','05'\nEXEC silver.usp_silver_trip_data_green '2020','06'\nEXEC silver.usp_silver_trip_data_green '2020','07'\nEXEC silver.usp_silver_trip_data_green '2020','08'\nEXEC silver.usp_silver_trip_data_green '2020','09'\nEXEC silver.usp_silver_trip_data_green '2020','10'\nEXEC silver.usp_silver_trip_data_green '2020','11'\nEXEC silver.usp_silver_trip_data_green '2020','12'\n\nEXEC silver.usp_silver_trip_data_green '2021','01'\nEXEC silver.usp_silver_trip_data_green '2021','02'\nEXEC silver.usp_silver_trip_data_green '2021','03'\nEXEC silver.usp_silver_trip_data_green '2021','04'\nEXEC silver.usp_silver_trip_data_green '2021','05'\nEXEC silver.usp_silver_trip_data_green '2021','06'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_explore_rate_code_json_standard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "----------------------------------------------------------------------------------------\n--- Reading Data from standard JSON file \n\n---[{\"rate_code_id\":1,\"rate_code\":\"Standard rate\"}\n---,{\"rate_code_id\":2,\"rate_code\":\"JFK\"}\n---,{\"rate_code_id\":3,\"rate_code\":\"Newark\"}\n---,{\"rate_code_id\":4,\"rate_code\":\"Nassau or Westchester\"}\n---,{\"rate_code_id\":5,\"rate_code\":\"Negotiated fare\"}\n---,{\"rate_code_id\":6,\"rate_code\":\"Group ride\"}\n---]\n---------------------------------------------------------------------------------------- \n\nselect *\nFROM\n    OPENROWSET(\n        BULK 'rate_code.json',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR ='0x0b', \n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR='0x0b'\n    ) \n    with (jsondoc NVARCHAR(MAX)) AS [result] \n    CROSS APPLY OPENJSON(jsondoc)\n    with (rate_code_id TINYINT,rate_code VARCHAR(25) )",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_create_silver_view')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\nDROP VIEW if EXISTS silver.vw_trip_data_green\nGO\n\nCREATE view silver.vw_trip_data_green\nas \nSELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month, \n    result.*\nFROM\n    OPENROWSET(\n    BULK  'silver/trip_data_green/year=*/month=*/*.parquet',\n    DATA_SOURCE = 'nyc_taxi_src',  \n    FORMAT = 'parquet'\n    ) \n    with \n    (\n        VendorID INT,lpep_pickup_datetime DATETIME2(7),lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag CHAR(1),RatecodeID INT,PULocationID SMALLINT,DOLocationID SMALLINT,\n    passenger_count INT,trip_distance FLOAT,fare_amount FLOAT,extra FLOAT ,mta_tax Float,\n    tip_amount Float,tolls_amount Float,ehail_fee Float,improvement_surcharge Float,total_amount Float,\n    payment_type SMALLINT,trip_type SMALLINT,congestion_surcharge Float\n    )\n    AS [result]\nGO \n\nselect top 100 * from silver.vw_trip_data_green",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_explore_trip_data_green_csv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery\n\nSELECT\n    count(*)\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    AS [result]\n--------------------------------------------------------------------------------------------\nSELECT\n    count(*)\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/*/*.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    AS [result]\n--------------------------------------------------------------------------------------------\nSELECT\n    count(*)\nFROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=2020/month=01/*.csv' , 'trip_data_green_csv/year=2020/month=02/*.csv'),\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    AS [result]\n    --------------------------------------------------------------------------------------------\nSELECT\n    count(*)\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv' ,\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    AS [result]\n--------------------------------------------------------------------------------------------\nSELECT\n    result.filename() as file_name, result.filepath() as file_path, count(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv' ,\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    AS [result]\n    group by result.filename(),result.filepath() \n    order by 1 \n    --------------------------------------------------------------------------------------------\nSELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month, \n    count(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv' ,\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    AS [result]\n    group by result.filepath(1),result.filepath(2)\n    order by 1 \n--------------------------------------------------------------------------------------------\n    SELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month, \n    count(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv' ,\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    AS [result]\n    where result.filepath(1)=2020 and result.filepath(2) in ('06','07','08')\n    group by result.filepath(1),result.filepath(2)\n    order by 1 \n\n--------------------------------------------------------------------------------------------\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_create_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nselect td.year,td.month,convert(DATE,td.lpep_pickup_datetime) as trip_date,tz.Borough,cal.day_name as trip_day,\ncase when cal.day_name in ('Saturday','Sunday') then 'Y' else 'N' end as trip_day_weekend_ind ,\nsum(case when pt.derscription='Credit card' then 1 else 0 end) as card_trip_count,\nsum(case when pt.derscription='Cash' then 1 else 0 end) as cash_trip_count\nfrom silver.vw_trip_data_green td \njoin silver.taxi_zone tz on tz.LocationID=td.PULocationID\njoin silver.calendar cal on cal.date=convert(DATE,td.lpep_pickup_datetime)\njoin silver.payment_type pt on pt.payment_type=td.payment_type\nWHERE td.year='2020' AND td.month='01'\ngroup by td.year,td.month,convert(DATE,td.lpep_pickup_datetime),tz.Borough,cal.day_name ,\ncase when cal.day_name in ('Saturday','Sunday') then 'Y' else 'N' end\n\n\nEXEC gold.usp_gold_trip_data_green '2020','01'\nEXEC gold.usp_gold_trip_data_green '2020','02'\nEXEC gold.usp_gold_trip_data_green '2020','03'\nEXEC gold.usp_gold_trip_data_green '2020','04'\nEXEC gold.usp_gold_trip_data_green '2020','05'\nEXEC gold.usp_gold_trip_data_green '2020','06'\nEXEC gold.usp_gold_trip_data_green '2020','07'\nEXEC gold.usp_gold_trip_data_green '2020','08'\nEXEC gold.usp_gold_trip_data_green '2020','09'\nEXEC gold.usp_gold_trip_data_green '2020','10'\nEXEC gold.usp_gold_trip_data_green '2020','11'\nEXEC gold.usp_gold_trip_data_green '2020','12'\n\nEXEC gold.usp_gold_trip_data_green '2021','01'\nEXEC gold.usp_gold_trip_data_green '2021','02'\nEXEC gold.usp_gold_trip_data_green '2021','03'\nEXEC gold.usp_gold_trip_data_green '2021','04'\nEXEC gold.usp_gold_trip_data_green '2021','05'\nEXEC gold.usp_gold_trip_data_green '2021','06'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_explore_trip_data_green_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery\n\nSELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month, \n    count(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n    where result.filepath(1)=2020\n    and result.filepath(2) in ('01','02','03')\n    group by result.filepath(1),result.filepath(2) \n\n\n    --------------------------------------------------------------------------------------\n\n    SELECT\n    top 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) WITH(tip_amount FLOAT,trip_type INT) AS [result]\n    where result.filepath(1)=2020\n    and result.filepath(2) in ('01','02','03')\n    \n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_create_gold_view')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\nDROP VIEW if EXISTS gold.vw_trip_data_green\nGO\n\nCREATE view gold.vw_trip_data_green\nas \nSELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month, \n    result.*\nFROM\n    OPENROWSET(\n    BULK  'gold/trip_data_green/year=*/month=*/*.parquet',\n    DATA_SOURCE = 'nyc_taxi_src',  \n    FORMAT = 'parquet'\n    ) \n    with \n    (\n       trip_date DATE,Borough VARCHAR(25),trip_day VARCHAR(25),trip_day_weekend_ind VARCHAR(1),\n       card_trip_count INT,cash_trip_count INT\n    )\n    AS [result]\nGO \n\nselect * from gold.vw_trip_data_green",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_explore_trip_data_green_delta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery\n\nSELECT\n   top 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'delta'\n    ) AS [result]\n\nSELECT\n   top 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'delta'\n    ) AS [result]\n    where year='2020' and month='01'    \n\n\nSELECT\n   top 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'delta'\n    ) \n    with(tip_amount FLOAT,trip_type INT,year varchar(4),month varchar(2))\n    AS [result]    \n\nSELECT\n   count(*)\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'delta'\n    ) AS [result]    \n   ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Query Taxi Zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Demo"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapseadlk.dfs.core.windows.net/demo/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "nyctaxispark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "1b974902-58fb-4a46-bb8c-bde015a69d66"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/91b67604-e48a-4add-ae30-68e139eb7f6a/resourceGroups/synapse-rg/providers/Microsoft.Synapse/workspaces/synapse-nyc/bigDataPools/nyctaxispark",
						"name": "nyctaxispark",
						"type": "Spark",
						"endpoint": "https://synapse-nyc.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/nyctaxispark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nyctaxispark')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 5
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		}
	]
}